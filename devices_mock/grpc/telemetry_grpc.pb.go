// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package devices_mock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
	BatchEvents(ctx context.Context, in *EventBatch, opts ...grpc.CallOption) (*Response, error)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_StreamEventsClient, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) SendEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/telemetry.TelemetryService/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) BatchEvents(ctx context.Context, in *EventBatch, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/telemetry.TelemetryService/BatchEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (TelemetryService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TelemetryService_ServiceDesc.Streams[0], "/telemetry.TelemetryService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &telemetryServiceStreamEventsClient{stream}
	return x, nil
}

type TelemetryService_StreamEventsClient interface {
	Send(*Event) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type telemetryServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *telemetryServiceStreamEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *telemetryServiceStreamEventsClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility
type TelemetryServiceServer interface {
	SendEvent(context.Context, *Event) (*Response, error)
	BatchEvents(context.Context, *EventBatch) (*Response, error)
	StreamEvents(TelemetryService_StreamEventsServer) error
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTelemetryServiceServer struct {
}

func (UnimplementedTelemetryServiceServer) SendEvent(context.Context, *Event) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}
func (UnimplementedTelemetryServiceServer) BatchEvents(context.Context, *EventBatch) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchEvents not implemented")
}
func (UnimplementedTelemetryServiceServer) StreamEvents(TelemetryService_StreamEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.TelemetryService/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).SendEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_BatchEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).BatchEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/telemetry.TelemetryService/BatchEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).BatchEvents(ctx, req.(*EventBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TelemetryServiceServer).StreamEvents(&telemetryServiceStreamEventsServer{stream})
}

type TelemetryService_StreamEventsServer interface {
	SendAndClose(*Response) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type telemetryServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *telemetryServiceStreamEventsServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *telemetryServiceStreamEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _TelemetryService_SendEvent_Handler,
		},
		{
			MethodName: "BatchEvents",
			Handler:    _TelemetryService_BatchEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _TelemetryService_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "telemetry.proto",
}
